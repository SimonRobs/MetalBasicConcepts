//
//  Shaders.metal
//  MetalBasicConcepts
//
//  Created by Simon Robatto on 2020-08-22.
//  Copyright Â© 2020 Simon Robatto. All rights reserved.
//

#include <metal_stdlib>
#include "ShaderTypes.h"
using namespace metal;


// Example 3

typedef struct
{
    // The [[position]] attribute of this member indicates that this value
    // is the clip space position of the vertex when this structure is
    // returned from the vertex function.
    float4 position [[position]];

    // Since this member does not have a special attribute, the rasterizer
    // interpolates its value with the values of the other triangle vertices
    // and then passes the interpolated value to the fragment shader for each
    // fragment in the triangle.
    float4 color;

} RasterizerData;

// The vertex keyword indicates that it is a vertex function.
// The attribute vertex_id is the UUID of each vertex generated by the GPU
// The attribute buffer(n) helps to specify which buffer slot to use. This makes it easier
// to revise shaders without changing the code of the app.
vertex RasterizerData vertexShader_Ex3(uint vertexID [[vertex_id]],
                                   constant Vertex* vertices [[buffer(VertexInputIndexVertices)]],
                                   constant vector_float2* viewportSizePointer [[buffer(VertexInputIndexViewportSize)]])
{
    RasterizerData out;
    float2 pixelSpacePosition = vertices[vertexID].position.xy;
    
    // Get the viewport size and cast to a float
    vector_float2 viewportSize = vector_float2(*viewportSizePointer);
    
    // To convert from positions in pixel space to positions in clip-space,
    //  divide the pixel coordinates by half the size of the viewport
    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);
    out.position.xy = pixelSpacePosition / (viewportSize / 2.0);
    
    // Pass the input color directly to the rasterizer
    out.color = vertices[vertexID].color;
    
    return out;
}

// The fragment keyword indicates that it is a fragment function.
// The attribute stage_in indicates that this argument is generated by the rasterizer
// The output of this shader is the color to be written to the render target
fragment float4 fragmentShader_Ex3(RasterizerData in [[stage_in]])
{
    return in.color;
}
